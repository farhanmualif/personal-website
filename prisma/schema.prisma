// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String    @id @default(cuid())
  uuid           String    @default(uuid())
  roleId         Int       @default(2)
  email          String    @unique
  password       String
  name           String?
  role           Role      @relation(fields: [roleId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Store          Store[]
  Image          String    @default("profile_image.png")
  updateAt       DateTime  @default(now())
  createdAt      DateTime  @default(now())
  Cart           Cart[]
  SellerOrders   Order[]   @relation("SellerOrders")
  CustomerOrders Order[]   @relation("CustomerOrders")
  Account        Account[]
  Session        Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Role {
  id        Int      @id @default(autoincrement())
  name      String
  User      User[]
  updateAt  DateTime @default(now())
  createdAt DateTime @default(now())
}

model Store {
  id        Int       @id @default(autoincrement())
  uuid      String    @default(uuid())
  name      String
  address   String
  ownerId   String
  owner     User      @relation(fields: [ownerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Product   Product[]
  Image     String    @default("store_image.png")
  rate      Float     @default(0)
  updateAt  DateTime  @default(now())
  createdAt DateTime  @default(now())
}

model Product {
  id           Int             @id @default(autoincrement())
  uuid         String          @unique @default(uuid())
  name         String
  price        String
  categoryId   Int
  storeId      Int
  category     ProductCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  rate         Float           @default(0)
  discount     Float?
  freeShipping Boolean         @default(false)
  storeName    Store           @relation(fields: [storeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  Image        String          @default("default.png")
  updateAt     DateTime        @default(now())
  createdAt    DateTime        @default(now())
  Cart         Cart[]
}

model ProductCategory {
  id        Int       @id @default(autoincrement())
  uuid      String    @default(uuid())
  name      String
  Product   Product[]
  updateAt  DateTime  @default(now())
  createdAt DateTime  @default(now())
}

model Cart {
  id        Int     @id @default(autoincrement())
  uuid      String  @default(uuid())
  productId Int
  userId    String
  Product   Product @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  User      User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Order {
  id         Int      @id @default(autoincrement())
  uuid       String   @default(uuid())
  productId  Int
  seller     User     @relation("SellerOrders", fields: [sellerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  customer   User     @relation("CustomerOrders", fields: [customerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  sellerId   String
  customerId String
  Payment    Payment  @relation(fields: [paymentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  paymentId  Int
  Shipping   Shipping @relation(fields: [shippingId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  shippingId Int
}

model Payment {
  id          Int     @id @default(autoincrement())
  uuid        String  @default(uuid())
  method      String
  totalAmount Int
  Order       Order[]
}

model Shipping {
  id       Int     @id @default(autoincrement())
  noResi   String
  provider String
  from     String
  to       String
  price    Int
  Order    Order[]
}
